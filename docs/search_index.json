[["index.html", "Education Attainment in the US Chapter 1 Introduction", " Education Attainment in the US Yifei Chen and Zujun Peng 2020-12-14 Chapter 1 Introduction "],["data-sources.html", "Chapter 2 Data Sources", " Chapter 2 Data Sources "],["data-cleaning.html", "Chapter 3 Data Cleaning", " Chapter 3 Data Cleaning The data sets that we gained from the official census website are in the forms of csv files before the transformation. Because of the unique characteristic of the census data, which are all count values with long descriptions, we primarily focus on transforming and pre-processing the data set into the version that we could apply in visualizing and analysis. It mainly contains the following steps: Read csv files as dataframes Transform the ‘messy’ data set into a ‘tidy’ one Formalize and abbreviate the categorical values Combine some groups (with relatively few frequencies) into one group Let’s use one of our data sets, ‘states’ as an example. After we read the csv files into data frame in R and extract the columns that we primarily focus on, the data contains multiple columns indicating education levels, with long and complicated names. states &lt;- read.csv(&quot;./data/states.csv&quot;, na.strings = &quot;N/A&quot;) #extract columns for education attainment states_education &lt;- states[,1:7] ## [1] &quot;State&quot; ## [2] &quot;Total&quot; ## [3] &quot;Less.than.high.school.graduate&quot; ## [4] &quot;High.school.graduate..includes.equivalency.&quot; ## [5] &quot;Some.college.or.associate.s.degree&quot; ## [6] &quot;Bachelor.s.degree&quot; ## [7] &quot;Graduate.or.professional.degree&quot; To have a tidy data set, we transform those columns indicating the education levels into one column: states_education &lt;- states_education %&gt;% pivot_longer(cols =!State ,names_to = &quot;Education&quot;,values_to = &quot;Population&quot;) ## # A tibble: 5 x 3 ## State Education Population ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Alabama Total 3360058 ## 2 Alabama Less.than.high.school.graduate 433073 ## 3 Alabama High.school.graduate..includes.equivalency. 1039241 ## 4 Alabama Some.college.or.associate.s.degree 1002387 ## 5 Alabama Bachelor.s.degree 547975 However, as we can see from the above subset of the dataset, some values in the ‘Education’ columns are long and complicated. It might create some issues for the following data visualization. Therefore, we abbreviate those values into shorter names. Their full names are indicated in the footnote of each graph using those abbreviations for clarification purpose. states_education &lt;- abbreviate(states_education,total = TRUE) head(states_education) ## # A tibble: 6 x 3 ## State Education Population ## &lt;chr&gt; &lt;fct&gt; &lt;int&gt; ## 1 Alabama Total 3360058 ## 2 Alabama Less Than High School 433073 ## 3 Alabama High School Graduate 1039241 ## 4 Alabama Some Colleges 1002387 ## 5 Alabama Bachelor Degree 547975 ## 6 Alabama Advanced Degree 337382 The above Step 1-3 are repeated for each data set we use. For some data sets containing multiple categories, some of which have relativel low frequencies, we combine those categories as one group. For instance, in the data set counting the number of people with different education attainments in various races, we combine the race groups like ‘Native Hawaiian and Other Pacific Islander alone’, ‘American Indian or Alaska Native alone’, and other race groups into one big group called ‘Other’. "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values There are no missing values in the data sets because we gain the count of the population with different education attainment and other backgrounds instead of the case data set. "],["results.html", "Chapter 5 Results", " Chapter 5 Results library(ggplot2) library(gridExtra) ## ## Attaching package: &#39;gridExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## combine library(vcd) ## Loading required package: grid library(ggmosaic) ## ## Attaching package: &#39;ggmosaic&#39; ## The following objects are masked from &#39;package:vcd&#39;: ## ## mosaic, spine library(usdata) edu2019 &lt;- education[education$Year==2019,] edu2019 %&gt;% group_by(Gender) %&gt;% mutate(total_pop = sum(Estimate))%&gt;% ungroup()%&gt;% ggplot()+ geom_col(aes(x = Education,y=Estimate/total_pop, fill = Gender), position=&quot;dodge&quot; )+ scale_fill_brewer(palette = 3)+ xlab(&quot;Year in School&quot;) + ylab(&quot;Proportion&quot;)+ ggtitle(&quot;Grouped Bar Chart of Education Attainment in 2019 Differed by Gender&quot;) + theme_light() #mosaic plot : done #x education y gender dt &lt;- xtabs(Estimate ~ Education + Gender, data=edu2019) vcd::mosaic(dt, direction = c(&quot;v&quot;, &quot;h&quot;), labeling = labeling_border(rot_labels = c(45, 0), abbreviate_labs = c(2, 1)),) #科学计数法: done race_total &lt;- race[race$Gender==&quot;Total&quot;,] ylab &lt;- c(0, 50, 100, 150) ggplot(race_total)+ geom_col(aes(x=Race,y=Estimate,fill=Education),position =&quot;dodge&quot;)+ xlab(&quot;Race&quot;)+ ylab(&quot;Population&quot;)+ ggtitle(&quot;Group Bar Chart of 2019 Education Attainment by Race&quot;)+ scale_y_continuous(labels = paste0(ylab, &quot;M&quot;), breaks = 10^6 * ylab )+ scale_fill_brewer(palette = 1) + theme(axis.text.x = element_text(angle=20, vjust=0.5)) # Function to change counts to cases # Source: http://www.cookbook-r.com/Manipulating_data/Converting_between_data_frames_and_contingency_tables/ countsToCases &lt;- function(x, countcol = &quot;Estimate&quot;) { idx &lt;- rep.int(seq_len(nrow(x)), x[[countcol]]) x[[countcol]] &lt;- NULL x[idx, ] } race_gender &lt;- race[race$Gender !=&quot;Total&quot;,] #mosaic plot: x = race, y = gender, facet by education #Two ways: use vcd mosaic plot (could not facet) # use ggplot, but it needs data frame type instead of contingency table (take long time) # exceeds time limit race_gender &lt;- race_gender[race_gender$Education != &quot;Total&quot;,] #race_gender_df &lt;- countsToCases(race_gender, countcol = &quot;Estimate&quot;) #ggplot(race_gender_df) + # geom_mosaic(x = product(Race, Gender)) + # facet_grid(Education~.) #男女比例 #check value ggplot(race_gender) + geom_col(aes(x = fct_rev(Race),y=Estimate, fill = Gender), position = &quot;fill&quot;) + xlab(&quot;Race&quot;) + theme(legend.position = &quot;bottom&quot;) + coord_flip()+ guides(fill = guide_legend(reverse = TRUE)) + facet_wrap(~Education, ncol = 1) + ylab(&quot;proportion&quot;) + scale_fill_brewer(palette = &quot;RdGy&quot;) + ggtitle(&quot;Proportional breakdown of Gender for each race, faceted on Education Attainment&quot;) #add legend！！！ earning2019 &lt;- earning[earning$Year==2019,] earning_total&lt;- earning2019$Earning[earning2019$Education==&quot;Total&quot;] earning2019 &lt;- earning2019[earning2019$Education!= &quot;Total&quot;,] #earning2019%&gt;% # group_by(Education)%&gt;% # mutate(total_earn =earning_total )%&gt;% # ungroup()%&gt;% # ggplot()+ # geom_col(aes(x=Education,y=Earning))+ # geom_hline(aes(yintercept=total_earn),col=&quot;red&quot;)+ # coord_flip()+ # facet_wrap(~Gender, ncol = 1) + # ggtitle(&quot;Median Earning in 2019 based on Education Attainment and Gender&quot;) #earning_plot + facet_grid(rows = vars(Gender)) #change birth csv file #title #check value ggplot(birth) + geom_col(aes(x = as.factor(Marriage), y = Estimate, fill = fct_rev(Education)), position = &quot;fill&quot;)+ coord_flip() + theme_light(15)+ theme(legend.position = &quot;bottom&quot;) + guides(fill = guide_legend(reverse = TRUE)) + scale_fill_brewer(palette = &quot;RdBu&quot;)+ theme(legend.title = element_text(size = 7),legend.text = element_text(size=7))+ facet_wrap(~Give_birth, ncol = 1)+ ylab(&quot;proportion&quot;) + xlab(&quot;Marriage Status&quot;)+ ggtitle(&quot;2019 Proportional breakdown of education attainment on \\n marriage status,faceted on giving birth or not&quot;) #one title #y label too small new_states&lt;-states %&gt;% group_by(State)%&gt;% mutate(bachelor_higher = (Population[Education==&quot;Bachelor Degree&quot;]+Population[Education==&quot;Advanced Degree&quot;])/Population[Education == &quot;Total&quot;])%&gt;% mutate(abb = state2abbr(State))%&gt;% mutate(median_earning = Earning[Education==&quot;Total&quot;])%&gt;% ungroup() new_states$abb[is.na(new_states$abb)]=&quot;PR&quot; ba_rate&lt;-ggplot(new_states)+ geom_point(aes(x=bachelor_higher, y=reorder(abb, bachelor_higher)), color = &quot;blue&quot;) + xlab(&quot;Rate of Bachelor Degree or Higher&quot;)+ ylab(&quot;State&quot;)+ ggtitle(&quot;2019 Rate of Bachelor Degree or Higher for Each State&quot;)+ theme_light() earnings &lt;- ggplot(new_states)+ geom_point(aes(x=median_earning, y=reorder(abb,bachelor_higher)), color = &quot;red&quot;) + xlab(&quot;Median Earning of the State&quot;)+ ylab(&quot;State&quot;)+ ggtitle(&quot;2019 Median Earning for Each State&quot;)+ theme_light() grid.arrange(ba_rate, earnings, ncol=2) "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclustion.html", "Chapter 7 Conclustion", " Chapter 7 Conclustion "]]
